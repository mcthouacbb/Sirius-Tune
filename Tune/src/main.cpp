#include "eval_params.h"

#include "pos.h"
#include "optimize.h"

#include <iostream>
#include <fstream>
#include <sstream>


struct
{
	struct
	{
		int materialMG[6];
		int materialEG[6];
		int psqtMG[6][64];
		int psqtEG[6][64];
	};
} params = {
	{
		{ 0, 858, 415, 322, 288, 77 },
		{ 0, 715, 382, 212, 195, 102 },
		{
			{
				  97,   68,   76,   65,   87,   66,   61,   41,
				  31,   89,   50,   45,   27,   88,   -6,  -25,
				  32,  110,   17,   34,   -8,   47,   47,  -26,
				 -11,   10,   19,  -17,  -26,  -20,   -4,  -34,
				  18,    8,   -9,  -63,  -55,  -53,  -35,  -63,
				  -8,    4,  -56,  -64,  -68,  -46,  -20,  -34,
				  18,  -16,  -26,  -63,  -51,  -27,    9,    8,
				 -42,   15,   -3,  -50,    1,  -31,   23,   18,
			},
			{
				 -40,  -19,   26,   37,   63,   70,    1,  -21,
				 -28,  -32,  -25,  -48,  -33,   76,   23,  103,
				 -25,  -18,   -1,   13,   28,   69,   95,   48,
				 -28,  -20,  -12,   -9,   -7,    1,  -11,    9,
				 -19,  -11,  -13,   -9,   -2,   -7,    3,   -9,
				 -17,    1,   -8,   -3,   -9,    3,    3,   -9,
				 -19,    2,    0,   -2,    0,    9,   15,    2,
				  -3,  -16,  -10,    3,  -13,  -24,  -41,  -10,
			},
			{
				  30,   34,   40,   50,   67,   87,   35,   10,
				   2,   -8,   20,   49,   21,   49,   62,   40,
				  -3,    3,    4,   21,   36,   45,   53,   39,
				 -27,  -15,    4,   14,   -2,   11,   20,   14,
				 -29,  -32,  -29,  -11,  -13,  -18,   -1,  -22,
				 -36,  -25,  -12,  -10,   -9,  -18,    0,  -13,
				 -39,  -20,  -21,  -16,  -17,  -17,   -5,  -58,
				 -22,  -18,   -6,   -2,   -3,  -13,  -39,  -24,
			},
			{
				 -23,  -36,  -16,  -42,  -78,  -25,   -2,  -46,
				 -32,    3,  -15,   -8,    9,   42,   10,   22,
				 -18,   -3,   34,   11,   47,   31,   40,   30,
				 -27,   -9,    7,   17,   18,    2,    0,   -8,
				 -15,   -2,    1,   17,   19,    2,    4,  -26,
				   9,    9,    7,    2,    4,   11,    2,    8,
				 -15,   15,    2,   -4,   -2,   14,   24,    1,
				  -1,  -20,   -9,  -15,  -21,  -19,   -7,  -13,
			},
			{
				-188,  -55,  -29,  -45,   29,  -89, -102,  -89,
				 -57,  -23,   57,   18,   64,   63,   14,    9,
				  -6,   17,   23,   52,   73,   97,   61,    9,
				  11,   12,   11,   40,   19,   39,    5,   24,
				  -7,    1,   14,   13,   18,   20,   10,  -14,
				 -13,   -2,   15,   10,   18,   12,   18,  -15,
				 -15,  -21,   -1,    4,    3,   12,    0,   -5,
				 -42,  -14,  -38,  -20,  -21,  -11,  -17,  -60,
			},
			{
				 -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
				  -4,    4,  -12,   16,   35,   29,  -17,  -37,
				 -35,  -25,   -5,   -9,    3,   27,  -15,  -41,
				 -23,   -9,  -15,   -7,    1,  -12,  -21,  -47,
				 -36,  -13,  -17,   -3,   -8,  -21,  -25,  -57,
				 -30,  -15,  -12,  -19,   -8,  -30,    0,  -33,
				 -33,   -7,  -23,  -27,  -19,   -1,   13,  -32,
				 -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
			},
		},
		{
			{
				 -60,  -30,  -32,  -24,  -24,  -16,  -19,  -37,
				 -21,  -12,   -9,  -10,   -5,    1,   13,    2,
				 -18,  -10,    2,    0,    7,    9,   14,    7,
				 -22,   -5,    3,   11,   12,   16,   10,    0,
				 -33,   -9,    6,   20,   22,   20,    8,   -2,
				 -27,  -10,   12,   20,   23,   17,    5,   -6,
				 -29,   -8,    4,   17,   14,    9,   -6,  -19,
				 -29,  -29,  -18,  -12,  -33,  -14,  -36,  -52,
			},
			{
				  -1,    5,  -13,    0,  -17,  -16,  -11,   14,
				  -9,   -3,   12,   48,   32,   17,   16,  -68,
				 -24,  -10,   15,    5,   30,   -9,  -32,  -24,
				 -18,    5,    2,   19,   35,   30,   24,    0,
				 -10,   -3,    2,   23,   14,    8,    5,  -11,
				 -32,  -40,    7,   -7,   10,   -5,   -2,  -18,
				 -16,  -19,  -18,   -6,   -5,  -34,  -47,  -38,
				 -29,  -29,  -26,  -49,  -18,  -30,  -26,  -48,
			},
			{
				   4,    1,    0,   -5,  -11,  -19,   -8,   -1,
				   4,   13,    6,   -6,   -5,   -7,  -15,  -15,
				   3,    2,    0,   -4,  -12,  -14,  -15,  -18,
				   4,    1,    2,   -5,   -1,   -6,  -13,  -14,
				  -1,    4,    6,    2,    1,   -2,  -13,  -14,
				  -5,   -2,   -6,   -4,   -4,   -6,  -18,  -18,
				  -2,   -5,   -1,   -1,   -3,    1,   -9,    0,
				  -5,    1,    0,    3,   -3,   -2,    5,  -18,
			},
			{
				 -14,  -15,  -17,    2,    3,   -8,  -17,    0,
				  -6,   -3,    2,   -8,   -4,  -18,   -8,  -34,
				   4,    4,   -5,    9,  -10,    5,   -9,  -17,
				  10,   13,    9,   10,    8,    0,    3,  -10,
				  -5,    3,   13,    6,    7,   12,   -9,   -8,
				 -13,    0,    7,   11,   18,    1,   -7,  -17,
				  -9,  -17,  -11,    5,    6,   -5,   -9,  -21,
				 -27,  -10,  -16,   -3,   -4,  -11,  -20,  -16,
			},
			{
				   1,  -32,  -13,   -8,  -23,  -14,  -16,  -64,
				 -15,   -4,  -17,   -2,  -20,  -20,  -23,  -37,
				 -14,   -5,   15,   12,   -8,   -5,  -18,  -17,
				  -7,   15,   21,   26,   24,   17,   16,  -12,
				  -2,    7,   23,   22,   28,   14,   -3,   -1,
				 -14,    6,    3,   21,   17,    3,   -3,  -18,
				 -20,  -10,   -5,    4,    7,   -1,   -9,  -16,
				 -36,  -21,   -5,   -1,   -7,   -2,  -22,  -17,
			},
			{
				 -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
				 120,  117,  104,   74,   64,   75,  112,  107,
				  56,   57,   41,   27,   16,    9,   35,   43,
				  -2,  -10,  -20,  -28,  -33,  -25,  -13,   -9,
				 -20,  -24,  -36,  -38,  -34,  -32,  -23,  -23,
				 -27,  -25,  -37,  -27,  -29,  -26,  -25,  -27,
				 -19,  -22,  -21,  -19,  -20,  -21,  -24,  -27,
				 -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
			},
		},
	}
};

EvalParams defaultParams;

constexpr int NUM_THREADS = 3;

int main()
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 64; j++)
		{
			defaultParams.data.psqtMG[i * 64 + j] = params.psqtMG[i][j] + params.materialMG[i];
			defaultParams.data.psqtEG[i * 64 + j] = params.psqtEG[i][j] + params.materialEG[i];
		}
	}

	for (int i = 0; i < 8; i++)
	{
		defaultParams.data.psqtMG[320 + i] = 0;
		defaultParams.data.psqtMG[376 + i] = 0;

		defaultParams.data.psqtEG[320 + i] = 0;
		defaultParams.data.psqtEG[376 + i] = 0;
	}

	printParams(defaultParams, std::cout);

	std::vector<ErrorThread> threadPool(NUM_THREADS);

    std::string outFile, inFile;
    std::string str;
    std::getline(std::cin, str);
    std::istringstream stream(str);
    stream >> inFile >> outFile;

    std::ifstream in(inFile);
    std::ofstream out(outFile);

    in.seekg(0, std::ios::end);
    size_t size = in.tellg();
    std::string epdString(size, '\0');
    in.seekg(0);
    in.read(epdString.data(), size);

    std::vector<EpdPos> epds = parseEpdFile(epdString);
	std::vector<Position> positions = getPositions(epds);

    double kValue = computeKValue(threadPool, defaultParams, positions);
    std::cout << "Final kValue: " << kValue;

    localSearch(threadPool, kValue, defaultParams, positions, out);
}
