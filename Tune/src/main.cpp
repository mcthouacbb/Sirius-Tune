#include "eval_params.h"

#include "pos.h"
#include "optimize.h"
#include "extract.h"

#include <iostream>
#include <fstream>
#include <sstream>


EvalParams defaultParams = {
	{
		{
			  20,   -4,   16,  -56,   -6,   14,   38,   69,
			 -61,  -11,  -52,   10,   -4,   11,    9,  -33,
			 -76,   21,  -47,  -57,  -52,   21,   25,  -51,
			 -68,  -76,  -77, -115, -123,  -87,  -86, -112,
			 -69,  -80,  -96, -132, -127, -112, -106, -126,
			 -40,  -28,  -82,  -92,  -92,  -91,  -48,  -69,
			  34,   -7,  -24,  -61,  -60,  -44,    4,   14,
			  23,   51,   24,  -80,  -11,  -54,   26,   29,

			 998, 1009, 1055, 1082, 1091, 1100, 1086, 1039,
			1024, 1007, 1014, 1005, 1014, 1068, 1041, 1100,
			1028, 1028, 1032, 1051, 1058, 1099, 1109, 1102,
			1014, 1020, 1027, 1025, 1029, 1039, 1042, 1049,
			1018, 1020, 1019, 1025, 1025, 1029, 1037, 1040,
			1018, 1030, 1022, 1024, 1025, 1032, 1044, 1036,
			1016, 1025, 1035, 1035, 1033, 1041, 1046, 1052,
			1018, 1008, 1015, 1031, 1020, 1005, 1019, 1017,

			 538,  539,  546,  550,  569,  589,  569,  579,
			 515,  511,  536,  558,  539,  573,  562,  589,
			 495,  517,  515,  522,  547,  551,  591,  566,
			 475,  493,  496,  501,  507,  510,  523,  517,
			 459,  462,  470,  483,  482,  470,  494,  478,
			 451,  462,  470,  471,  476,  471,  508,  481,
			 447,  462,  475,  473,  475,  479,  496,  456,
			 467,  471,  481,  486,  489,  477,  488,  464,

			 339,  323,  333,  293,  292,  318,  354,  309,
			 352,  380,  369,  360,  387,  396,  378,  376,
			 365,  390,  400,  415,  407,  435,  418,  403,
			 358,  373,  397,  407,  403,  398,  377,  362,
			 355,  370,  376,  396,  394,  377,  371,  362,
			 370,  376,  376,  378,  380,  376,  375,  380,
			 370,  373,  382,  362,  367,  380,  391,  373,
			 346,  368,  353,  344,  346,  344,  370,  356,

			 159,  245,  302,  327,  375,  282,  257,  239,
			 316,  347,  391,  391,  393,  444,  356,  369,
			 349,  386,  401,  418,  459,  461,  413,  379,
			 349,  363,  386,  409,  388,  416,  372,  384,
			 337,  350,  367,  369,  378,  374,  372,  345,
			 319,  341,  358,  360,  370,  360,  363,  332,
			 306,  317,  336,  347,  347,  349,  335,  333,
			 265,  318,  301,  318,  321,  333,  318,  286,

			  82,   82,   82,   82,   82,   82,   82,   82,
			 166,  179,  164,  183,  175,  167,  102,   70,
			  77,   96,  126,  128,  134,  160,  139,   92,
			  62,   85,   89,   91,  112,  107,  109,   80,
			  48,   77,   75,   92,   91,   85,   94,   61,
			  48,   73,   75,   73,   89,   81,  111,   73,
			  47,   74,   68,   58,   78,   96,  122,   68,
			  82,   82,   82,   82,   82,   82,   82,   82,
		},
		{
			 -78,  -34,  -26,    1,   -9,   -3,   -7,  -68,
			  -7,   16,   25,   14,   24,   36,   34,   13,
			   6,   21,   37,   42,   46,   41,   39,   22,
			  -2,   28,   41,   51,   54,   49,   43,   23,
			 -12,   17,   37,   51,   51,   44,   31,   16,
			 -19,    4,   23,   35,   36,   30,   12,    2,
			 -33,   -8,    5,   16,   18,   12,   -6,  -24,
			 -60,  -48,  -28,   -9,  -35,  -11,  -36,  -63,

			 958,  970,  969,  963,  954,  946,  926,  955,
			 936,  970, 1001, 1019, 1029,  985,  978,  929,
			 939,  956,  989,  986, 1005,  976,  940,  923,
			 946,  969,  979, 1002, 1014, 1005,  987,  964,
			 947,  967,  976,  999,  995,  980,  967,  950,
			 932,  935,  969,  960,  969,  960,  940,  929,
			 927,  928,  921,  931,  936,  908,  885,  864,
			 921,  921,  927,  907,  923,  925,  905,  900,

			 521,  523,  530,  526,  517,  506,  509,  506,
			 522,  533,  532,  523,  525,  511,  507,  496,
			 523,  524,  526,  522,  510,  506,  497,  493,
			 526,  522,  530,  526,  514,  510,  505,  501,
			 519,  523,  525,  523,  521,  517,  505,  504,
			 514,  515,  513,  517,  512,  509,  487,  493,
			 511,  513,  514,  515,  508,  504,  496,  507,
			 505,  513,  520,  518,  511,  508,  508,  497,

			 276,  281,  280,  294,  290,  281,  274,  275,
			 263,  279,  280,  284,  275,  274,  280,  256,
			 287,  282,  289,  280,  283,  285,  277,  275,
			 283,  296,  291,  302,  295,  294,  289,  279,
			 277,  292,  301,  295,  298,  294,  287,  268,
			 273,  282,  292,  295,  295,  291,  276,  266,
			 272,  269,  269,  281,  287,  274,  272,  252,
			 257,  271,  251,  275,  271,  270,  258,  248,

			 232,  251,  265,  259,  255,  248,  254,  190,
			 252,  265,  267,  271,  257,  245,  256,  229,
			 262,  271,  288,  285,  267,  265,  259,  248,
			 270,  289,  297,  299,  301,  292,  285,  259,
			 271,  280,  301,  299,  301,  292,  278,  262,
			 257,  272,  278,  293,  292,  278,  266,  255,
			 250,  263,  270,  274,  273,  268,  255,  254,
			 240,  226,  259,  261,  260,  252,  234,  238,

			  94,   94,   94,   94,   94,   94,   94,   94,
			 253,  248,  243,  203,  198,  209,  251,  259,
			 199,  205,  178,  157,  148,  140,  178,  176,
			 135,  128,  112,  102,   95,  101,  114,  113,
			 112,  110,   97,   91,   92,   96,  102,   98,
			 106,  109,   97,  106,  101,  101,  100,   92,
			 111,  114,  107,  112,  112,  105,   98,   93,
			  94,   94,   94,   94,   94,   94,   94,   94,
		},
		17, 64,
		14, 31
	}
};

constexpr int NUM_THREADS = 3;
constexpr double K_VALUE = 3.81492;

int main()
{
	printParams(defaultParams, std::cout);

	extractMaterial(defaultParams);

	std::vector<ErrorThread> threadPool(NUM_THREADS);

	std::string outFile, inFile;
	std::string str;
	std::getline(std::cin, str);
	std::istringstream stream(str);
	stream >> inFile >> outFile;

	std::ifstream in(inFile);
	std::ofstream out(outFile);


	std::vector<Position> positions;
	{
		in.seekg(0, std::ios::end);
		size_t size = in.tellg();
		std::string epdString(size, '\0');
		in.seekg(0);
		in.read(epdString.data(), size);

		std::vector<EpdPos> epds = parseEpdFile(epdString);
		positions = getPositions(epds);
	}

	// double kValue = computeKValue(K_VALUE, threadPool, defaultParams, positions);
	double kValue = K_VALUE;
	std::cout << "Final kValue: " << kValue << std::endl;

	localSearch(threadPool, kValue, defaultParams, positions, out);
}
