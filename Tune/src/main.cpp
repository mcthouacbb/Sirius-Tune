#include "eval_params.h"

#include "pos.h"
#include "optimize.h"
#include "extract.h"

#include <iostream>
#include <fstream>
#include <sstream>


EvalParams defaultParams = {
	{
		{
			  50,    8,   56,  -45,   27,    9,   34,  101, 
			 -50,   -8,  -37,   18,    4,   11,   13,   -2, 
			 -65,   20,  -48,  -44,  -52,   26,   27,  -12, 
			 -62,  -59,  -67, -114, -110,  -85,  -84, -113, 
			 -59,  -73,  -93, -127, -125,  -89, -103, -125, 
			 -38,  -25,  -78,  -89,  -90,  -91,  -46,  -65, 
			  36,   -2,  -22,  -57,  -59,  -43,    4,   14, 
			  24,   54,   28,  -80,  -10,  -53,   26,   29, 

			 998, 1006, 1056, 1084, 1091, 1104, 1082, 1038, 
			1024, 1004, 1014, 1004, 1014, 1068, 1042, 1103, 
			1024, 1026, 1030, 1050, 1056, 1100, 1108, 1101, 
			1014, 1020, 1023, 1025, 1029, 1041, 1042, 1049, 
			1017, 1021, 1015, 1024, 1025, 1028, 1035, 1038, 
			1018, 1028, 1022, 1024, 1025, 1029, 1043, 1036, 
			1014, 1024, 1032, 1035, 1032, 1043, 1046, 1049, 
			1018, 1007, 1015, 1031, 1019, 1002, 1017, 1018, 

			 537,  540,  551,  554,  572,  593,  568,  579, 
			 515,  509,  537,  558,  541,  578,  566,  589, 
			 492,  517,  516,  523,  547,  551,  591,  564, 
			 476,  493,  497,  503,  506,  508,  522,  516, 
			 458,  464,  469,  485,  482,  470,  493,  478, 
			 452,  464,  470,  472,  477,  471,  508,  481, 
			 447,  463,  475,  474,  475,  479,  496,  458, 
			 467,  471,  481,  486,  489,  477,  486,  464, 

			 342,  325,  336,  301,  296,  323,  351,  314, 
			 353,  381,  373,  359,  390,  397,  383,  376, 
			 365,  395,  400,  417,  408,  437,  418,  405, 
			 358,  373,  398,  409,  405,  398,  379,  362, 
			 355,  370,  376,  398,  395,  380,  371,  363, 
			 372,  377,  376,  379,  382,  376,  377,  380, 
			 370,  375,  382,  363,  369,  382,  391,  375, 
			 348,  368,  355,  344,  348,  344,  372,  357, 

			 166,  239,  305,  333,  384,  287,  254,  246, 
			 317,  347,  398,  392,  396,  448,  357,  370, 
			 350,  387,  402,  420,  459,  460,  415,  378, 
			 351,  365,  386,  412,  389,  418,  372,  385, 
			 337,  351,  367,  369,  378,  375,  372,  345, 
			 322,  343,  359,  360,  371,  360,  364,  333, 
			 307,  318,  336,  347,  348,  351,  336,  333, 
			 263,  319,  301,  319,  321,  333,  318,  287, 

			  82,   82,   82,   82,   82,   82,   82,   82, 
			 160,  172,  156,  181,  165,  161,   87,   66, 
			  73,   92,  121,  123,  129,  152,  132,   90, 
			  62,   84,   85,   88,  109,   99,  109,   78, 
			  48,   77,   73,   91,   90,   83,   94,   60, 
			  48,   73,   72,   73,   87,   76,  111,   73, 
			  47,   74,   65,   58,   77,   96,  122,   68, 
			  82,   82,   82,   82,   82,   82,   82,   82, 
		},
		{
			 -84,  -37,  -35,    0,  -15,   -2,   -9,  -75, 
			  -9,   15,   23,   13,   23,   36,   32,    7, 
			   4,   21,   37,   40,   47,   41,   39,   15, 
			  -3,   26,   40,   52,   53,   49,   43,   23, 
			 -13,   16,   37,   51,   51,   39,   31,   16, 
			 -19,    4,   23,   34,   36,   30,   12,    2, 
			 -33,  -10,    5,   15,   18,   12,   -4,  -24, 
			 -60,  -48,  -31,   -9,  -36,  -10,  -34,  -63, 

			 956,  971,  967,  961,  952,  942,  924,  955, 
			 932,  973, 1000, 1021, 1029,  985,  974,  923, 
			 944,  957,  991,  986, 1007,  976,  940,  926, 
			 947,  968,  983,  999, 1013, 1001,  984,  960, 
			 945,  961,  981, 1001,  993,  979,  970,  953, 
			 927,  939,  965,  958,  968,  966,  943,  927, 
			 932,  928,  924,  929,  936,  905,  885,  870, 
			 917,  921,  921,  902,  924,  926,  905,  894, 

			 520,  521,  526,  523,  514,  504,  508,  506, 
			 520,  532,  531,  523,  523,  508,  505,  493, 
			 523,  522,  524,  520,  510,  504,  496,  492, 
			 524,  520,  528,  525,  514,  510,  503,  500, 
			 519,  520,  524,  521,  519,  517,  504,  503, 
			 513,  512,  513,  516,  511,  506,  487,  492, 
			 509,  511,  512,  515,  508,  503,  495,  505, 
			 505,  511,  518,  518,  511,  508,  507,  497, 

			 276,  279,  279,  290,  289,  278,  273,  273, 
			 261,  279,  279,  283,  275,  273,  279,  255, 
			 287,  280,  289,  280,  282,  283,  277,  272, 
			 283,  296,  290,  302,  295,  293,  289,  279, 
			 278,  290,  299,  294,  297,  291,  287,  267, 
			 270,  282,  291,  290,  293,  291,  274,  265, 
			 271,  266,  268,  280,  282,  274,  272,  252, 
			 254,  270,  249,  274,  269,  270,  258,  246, 

			 228,  252,  263,  257,  251,  244,  254,  186, 
			 251,  265,  262,  270,  254,  245,  256,  228, 
			 259,  271,  287,  285,  267,  265,  258,  248, 
			 270,  288,  297,  297,  302,  289,  288,  259, 
			 271,  280,  300,  298,  301,  291,  277,  262, 
			 252,  271,  278,  293,  292,  279,  266,  256, 
			 249,  260,  269,  274,  273,  268,  254,  254, 
			 240,  229,  259,  261,  260,  250,  237,  235, 

			  94,   94,   94,   94,   94,   94,   94,   94, 
			 251,  246,  242,  203,  199,  205,  251,  258, 
			 199,  202,  174,  156,  147,  134,  174,  175, 
			 133,  124,  107,  100,   91,   96,  109,  113, 
			 112,  108,   94,   91,   90,   90,   99,   98, 
			 106,  106,   92,  104,   99,   94,   97,   93, 
			 113,  111,  103,  106,  111,   98,   96,   93, 
			  94,   94,   94,   94,   94,   94,   94,   94, 
		},
		17, 59
	}
};

constexpr int NUM_THREADS = 3;
constexpr double K_VALUE = 3.81492;

int main()
{
    printParams(defaultParams, std::cout);

    extractMaterial(defaultParams);
    std::array<std::array<int, 6>, 2> normMaterial;
    EvalParams normParams = defaultParams;
    normBytes(normParams, normMaterial);

    std::vector<uint128_t> compressed = compressPsts(normParams, normMaterial);
    std::cout << "Compressed: {";
    for (auto& decimal : compressed)
    {
        std::cout << decimal << "m, ";
    }
    std::cout << "}\n";

    std::vector<ErrorThread> threadPool(NUM_THREADS);

    std::string outFile, inFile;
    std::string str;
    std::getline(std::cin, str);
    std::istringstream stream(str);
    stream >> inFile >> outFile;

    std::ifstream in(inFile);
    std::ofstream out(outFile);


    std::vector<Position> positions;
    {
        in.seekg(0, std::ios::end);
        size_t size = in.tellg();
        std::string epdString(size, '\0');
        in.seekg(0);
        in.read(epdString.data(), size);

        std::vector<EpdPos> epds = parseEpdFile(epdString);
        positions = getPositions(epds);
    }

    // double kValue = computeKValue(K_VALUE, threadPool, defaultParams, positions);
    double kValue = K_VALUE;
    std::cout << "Final kValue: " << kValue << std::endl;

    localSearch(threadPool, kValue, defaultParams, positions, out);
}
